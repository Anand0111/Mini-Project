#Import SVM,Matplotlib,model_selection from sklearn to split data
import matplotlib.pyplot as plt
from sklearn import datasets, svm, metrics
from sklearn.model_selection import train_test_split


#Load load_digits() data set from sklearn
d1= datasets.load_digits()


#Print 1st 4 images by using subplot to split plot area 2*4
_, axes = plt.subplots(2, 4)
il= list(zip(d1.images, d1.target))
for r, (image, label) in zip(axes[0,:], il[:4]):
    r.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
    r.set_title('Training Set: %i' % label)


#Reshape Your image
n_samples = len(d1.images)
data = d1.images.reshape((n_samples, -1))
cls = svm.SVC(gamma=0.001)


#Split the data set 
xtr,xte,ytr,yte = train_test_split(data, d1.target, test_size=0.5, shuffle=False)

#Apply SVM Algorithm to the data set (Train case)
cls.fit(xtr,ytr)

#Predict value for Test Case
pred= cls.predict(xte)

#Print The output image and classify
ip= list(zip(d1.images[n_samples //2:], pred))
for r, (image, prediction) in zip(axes[1,:], ip[:4]):
    r.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
    r.set_title('Prediction Set: %i' % prediction)


#Measure Accuracy using accuracy score:-
from sklearn.metrics import confusion_matrix,accuracy_score
print("Accuracy Using accuracy_score:-\n",accuracy_score(pred,yte)*100)


#Measure Accuracy using confusion matrics
print("Report for Image Classification %s:\n%s\n"% (cls, metrics.classification_report(yte, pred)))
disp = metrics.plot_confusion_matrix(cls,xte,yte)
disp.figure_.suptitle("Confusion Matrix")
print("Confusion matrix:\n%s" % disp.confusion_matrix)

plt.show()
